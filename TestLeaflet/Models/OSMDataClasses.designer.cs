#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.19448
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestLeaflet.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OSM_Data_DB")]
	public partial class OSMDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertNodes(Nodes instance);
    partial void UpdateNodes(Nodes instance);
    partial void DeleteNodes(Nodes instance);
    partial void InsertNodeTags(NodeTags instance);
    partial void UpdateNodeTags(NodeTags instance);
    partial void DeleteNodeTags(NodeTags instance);
    partial void InsertWayNodes(WayNodes instance);
    partial void UpdateWayNodes(WayNodes instance);
    partial void DeleteWayNodes(WayNodes instance);
    partial void InsertWays(Ways instance);
    partial void UpdateWays(Ways instance);
    partial void DeleteWays(Ways instance);
    partial void InsertWayTags(WayTags instance);
    partial void UpdateWayTags(WayTags instance);
    partial void DeleteWayTags(WayTags instance);
    #endregion
		
		public OSMDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["OSM_Data_DBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OSMDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OSMDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OSMDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OSMDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Nodes> Nodes
		{
			get
			{
				return this.GetTable<Nodes>();
			}
		}
		
		public System.Data.Linq.Table<NodeTags> NodeTags
		{
			get
			{
				return this.GetTable<NodeTags>();
			}
		}
		
		public System.Data.Linq.Table<WayNodes> WayNodes
		{
			get
			{
				return this.GetTable<WayNodes>();
			}
		}
		
		public System.Data.Linq.Table<Ways> Ways
		{
			get
			{
				return this.GetTable<Ways>();
			}
		}
		
		public System.Data.Linq.Table<WayTags> WayTags
		{
			get
			{
				return this.GetTable<WayTags>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nodes")]
	public partial class Nodes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private long _NodeID;
		
		private string _Latitude;
		
		private string _Longitude;
		
		private EntitySet<NodeTags> _NodeTags;
		
		private EntitySet<WayNodes> _WayNodes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNodeIDChanging(long value);
    partial void OnNodeIDChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Nodes()
		{
			this._NodeTags = new EntitySet<NodeTags>(new Action<NodeTags>(this.attach_NodeTags), new Action<NodeTags>(this.detach_NodeTags));
			this._WayNodes = new EntitySet<WayNodes>(new Action<WayNodes>(this.attach_WayNodes), new Action<WayNodes>(this.detach_WayNodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeID", DbType="BigInt NOT NULL")]
		public long NodeID
		{
			get
			{
				return this._NodeID;
			}
			set
			{
				if ((this._NodeID != value))
				{
					this.OnNodeIDChanging(value);
					this.SendPropertyChanging();
					this._NodeID = value;
					this.SendPropertyChanged("NodeID");
					this.OnNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nodes_NodeTags", Storage="_NodeTags", ThisKey="NodeID", OtherKey="NodeID")]
		public EntitySet<NodeTags> NodeTags
		{
			get
			{
				return this._NodeTags;
			}
			set
			{
				this._NodeTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nodes_WayNodes", Storage="_WayNodes", ThisKey="NodeID", OtherKey="NodeID")]
		public EntitySet<WayNodes> WayNodes
		{
			get
			{
				return this._WayNodes;
			}
			set
			{
				this._WayNodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NodeTags(NodeTags entity)
		{
			this.SendPropertyChanging();
			entity.Nodes = this;
		}
		
		private void detach_NodeTags(NodeTags entity)
		{
			this.SendPropertyChanging();
			entity.Nodes = null;
		}
		
		private void attach_WayNodes(WayNodes entity)
		{
			this.SendPropertyChanging();
			entity.Nodes = this;
		}
		
		private void detach_WayNodes(WayNodes entity)
		{
			this.SendPropertyChanging();
			entity.Nodes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NodeTags")]
	public partial class NodeTags : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private long _NodeID;
		
		private string _TagName;
		
		private string _TagValue;
		
		private EntityRef<Nodes> _Nodes;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNodeIDChanging(long value);
    partial void OnNodeIDChanged();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnTagValueChanging(string value);
    partial void OnTagValueChanged();
    #endregion
		
		public NodeTags()
		{
			this._Nodes = default(EntityRef<Nodes>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeID", DbType="BigInt NOT NULL")]
		public long NodeID
		{
			get
			{
				return this._NodeID;
			}
			set
			{
				if ((this._NodeID != value))
				{
					if (this._Nodes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeIDChanging(value);
					this.SendPropertyChanging();
					this._NodeID = value;
					this.SendPropertyChanged("NodeID");
					this.OnNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagValue", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TagValue
		{
			get
			{
				return this._TagValue;
			}
			set
			{
				if ((this._TagValue != value))
				{
					this.OnTagValueChanging(value);
					this.SendPropertyChanging();
					this._TagValue = value;
					this.SendPropertyChanged("TagValue");
					this.OnTagValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nodes_NodeTags", Storage="_Nodes", ThisKey="NodeID", OtherKey="NodeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Nodes Nodes
		{
			get
			{
				return this._Nodes.Entity;
			}
			set
			{
				Nodes previousValue = this._Nodes.Entity;
				if (((previousValue != value) 
							|| (this._Nodes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nodes.Entity = null;
						previousValue.NodeTags.Remove(this);
					}
					this._Nodes.Entity = value;
					if ((value != null))
					{
						value.NodeTags.Add(this);
						this._NodeID = value.NodeID;
					}
					else
					{
						this._NodeID = default(long);
					}
					this.SendPropertyChanged("Nodes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WayNodes")]
	public partial class WayNodes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private long _WayID;
		
		private long _NodeID;
		
		private EntityRef<Nodes> _Nodes;
		
		private EntityRef<Ways> _Ways;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWayIDChanging(long value);
    partial void OnWayIDChanged();
    partial void OnNodeIDChanging(long value);
    partial void OnNodeIDChanged();
    #endregion
		
		public WayNodes()
		{
			this._Nodes = default(EntityRef<Nodes>);
			this._Ways = default(EntityRef<Ways>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WayID", DbType="BigInt NOT NULL")]
		public long WayID
		{
			get
			{
				return this._WayID;
			}
			set
			{
				if ((this._WayID != value))
				{
					if (this._Ways.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWayIDChanging(value);
					this.SendPropertyChanging();
					this._WayID = value;
					this.SendPropertyChanged("WayID");
					this.OnWayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeID", DbType="BigInt NOT NULL")]
		public long NodeID
		{
			get
			{
				return this._NodeID;
			}
			set
			{
				if ((this._NodeID != value))
				{
					if (this._Nodes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNodeIDChanging(value);
					this.SendPropertyChanging();
					this._NodeID = value;
					this.SendPropertyChanged("NodeID");
					this.OnNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Nodes_WayNodes", Storage="_Nodes", ThisKey="NodeID", OtherKey="NodeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Nodes Nodes
		{
			get
			{
				return this._Nodes.Entity;
			}
			set
			{
				Nodes previousValue = this._Nodes.Entity;
				if (((previousValue != value) 
							|| (this._Nodes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nodes.Entity = null;
						previousValue.WayNodes.Remove(this);
					}
					this._Nodes.Entity = value;
					if ((value != null))
					{
						value.WayNodes.Add(this);
						this._NodeID = value.NodeID;
					}
					else
					{
						this._NodeID = default(long);
					}
					this.SendPropertyChanged("Nodes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ways_WayNodes", Storage="_Ways", ThisKey="WayID", OtherKey="WayID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Ways Ways
		{
			get
			{
				return this._Ways.Entity;
			}
			set
			{
				Ways previousValue = this._Ways.Entity;
				if (((previousValue != value) 
							|| (this._Ways.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ways.Entity = null;
						previousValue.WayNodes.Remove(this);
					}
					this._Ways.Entity = value;
					if ((value != null))
					{
						value.WayNodes.Add(this);
						this._WayID = value.WayID;
					}
					else
					{
						this._WayID = default(long);
					}
					this.SendPropertyChanged("Ways");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ways")]
	public partial class Ways : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private long _WayID;
		
		private EntitySet<WayNodes> _WayNodes;
		
		private EntitySet<WayTags> _WayTags;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWayIDChanging(long value);
    partial void OnWayIDChanged();
    #endregion
		
		public Ways()
		{
			this._WayNodes = new EntitySet<WayNodes>(new Action<WayNodes>(this.attach_WayNodes), new Action<WayNodes>(this.detach_WayNodes));
			this._WayTags = new EntitySet<WayTags>(new Action<WayTags>(this.attach_WayTags), new Action<WayTags>(this.detach_WayTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WayID", DbType="BigInt NOT NULL")]
		public long WayID
		{
			get
			{
				return this._WayID;
			}
			set
			{
				if ((this._WayID != value))
				{
					this.OnWayIDChanging(value);
					this.SendPropertyChanging();
					this._WayID = value;
					this.SendPropertyChanged("WayID");
					this.OnWayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ways_WayNodes", Storage="_WayNodes", ThisKey="WayID", OtherKey="WayID")]
		public EntitySet<WayNodes> WayNodes
		{
			get
			{
				return this._WayNodes;
			}
			set
			{
				this._WayNodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ways_WayTags", Storage="_WayTags", ThisKey="WayID", OtherKey="WayID")]
		public EntitySet<WayTags> WayTags
		{
			get
			{
				return this._WayTags;
			}
			set
			{
				this._WayTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WayNodes(WayNodes entity)
		{
			this.SendPropertyChanging();
			entity.Ways = this;
		}
		
		private void detach_WayNodes(WayNodes entity)
		{
			this.SendPropertyChanging();
			entity.Ways = null;
		}
		
		private void attach_WayTags(WayTags entity)
		{
			this.SendPropertyChanging();
			entity.Ways = this;
		}
		
		private void detach_WayTags(WayTags entity)
		{
			this.SendPropertyChanging();
			entity.Ways = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WayTags")]
	public partial class WayTags : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private long _WayID;
		
		private string _TagName;
		
		private string _TagValue;
		
		private EntityRef<Ways> _Ways;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWayIDChanging(long value);
    partial void OnWayIDChanged();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnTagValueChanging(string value);
    partial void OnTagValueChanged();
    #endregion
		
		public WayTags()
		{
			this._Ways = default(EntityRef<Ways>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WayID", DbType="BigInt NOT NULL")]
		public long WayID
		{
			get
			{
				return this._WayID;
			}
			set
			{
				if ((this._WayID != value))
				{
					if (this._Ways.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWayIDChanging(value);
					this.SendPropertyChanging();
					this._WayID = value;
					this.SendPropertyChanged("WayID");
					this.OnWayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagName", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagValue", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TagValue
		{
			get
			{
				return this._TagValue;
			}
			set
			{
				if ((this._TagValue != value))
				{
					this.OnTagValueChanging(value);
					this.SendPropertyChanging();
					this._TagValue = value;
					this.SendPropertyChanged("TagValue");
					this.OnTagValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ways_WayTags", Storage="_Ways", ThisKey="WayID", OtherKey="WayID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Ways Ways
		{
			get
			{
				return this._Ways.Entity;
			}
			set
			{
				Ways previousValue = this._Ways.Entity;
				if (((previousValue != value) 
							|| (this._Ways.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ways.Entity = null;
						previousValue.WayTags.Remove(this);
					}
					this._Ways.Entity = value;
					if ((value != null))
					{
						value.WayTags.Add(this);
						this._WayID = value.WayID;
					}
					else
					{
						this._WayID = default(long);
					}
					this.SendPropertyChanged("Ways");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
